This challenge will let you learn about bitwise operators in C.

Inside the CPU, mathematical operations like addition, subtraction, multiplication and division are done in bit-level. 
To perform bit-level operations in C programming, bitwise operators are used which are explained below.

Bitwise AND operator & The output of bitwise AND is 1 if the corresponding bits of two operands is 1. 
If either bit of an operand is 0, the result of corresponding bit is evaluated to 0. It is denoted by &.

Bitwise OR operator | The output of bitwise OR is 1 if at least one corresponding bit of two operands is 1. It is denoted by |.

Bitwise XOR (exclusive OR) operator ^ The result of bitwise XOR operator is 1 if the corresponding bits of two operands are opposite. 
It is denoted by âŠ•.

code  :

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
//Complete the following function.


void calculate_the_maximum(int n, int k) {
  //Write your code here.
  int i,j,max1,max2,max3;
  
  max1=0;
  max2=0;
  max3=0;
  for (i=1;i<=n;i++) {
        for (j=i+1;j<=n;j++) {
            if (((i&j) > max1) && ((i&j) < k)) {
                max1 = i&j;
            }
            if (((i|j) > max2) && ((i|j) < k)) {
                max2 = i|j;
            }
            if (((i^j) > max3) && ((i^j) < k)) {
                max3 = i^j;
          }
      }
  }
  printf("%d\n%d\n%d",max1,max2,max3);
}

int main() {
    int n, k;
  
    scanf("%d %d", &n, &k);
    calculate_the_maximum(n, k);
 
    return 0;
}
