Strings are usually ordered in lexicographical order. That means they are ordered by comparing their leftmost different characters. 
For example, abc<abd  because c<d . Also z>yyy  because z>y . 
If one string is an exact prefix of the other it is lexicographically smaller, e.g.,gh<ghij .

Given an array of strings sorted in lexicographical order, print all of its permutations in strict lexicographical order.
If two permutations look the same, only print one of them. See the 'note' below for an example.

Complete the function next_permutation which generates the permutations in the described order.

code :

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


	/**
	* Complete this method
	* Return 0 when there is no next permutation and 1 otherwise
	* Modify array s to its next permutation
	*/
    int next_permutation(int n, char **s){
    // Find non-increasing suffix
    int i = n-1;
    while(i>0 && strcmp(s[i-1],s[i])>=0) 
        i--;    // find key
    if (i<=0) return 0;
    
    // Swap key with its successor in suffix
    int j = n-1;
    while(strcmp(s[i-1],s[j])>=0) 
        j--;    // find rightmost successor to key
    char *tmp = s[i-1];
    s[i-1] = s[j];
    s[j] = tmp;
    
    // Reverse the suffix
    j = n-1;
    while(i<j) {
        tmp = s[i];
        s[i] = s[j];
        s[j] = tmp;
        i++;
        j--;
    }
    return 1;
}

